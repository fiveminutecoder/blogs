@page "/fetchdata"

<PageTitle>Weather forecast</PageTitle>

@using FiveMinuteProject.Data
@inject WeatherForecastService ForecastService

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

<select @bind="selectedTimeFrame">
    @foreach (var timeFrame in timeFrames)
    {
        <option value="@timeFrame">@timeFrame</option>
    }
</select>
<button @onclick="OnSelectedTimeFrameChanged">Get Forecast</button>
@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private int[] timeFrames = new int[] { 3, 7, 10 };
    private int selectedTimeFrame;

    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        selectedTimeFrame = 7;
        forecasts = await GetForecast();
    }

    private async Task OnSelectedTimeFrameChanged()
    {
        forecasts = await GetForecast();
    }

    private async Task<WeatherForecast[]> GetForecast()
    {
        Console.WriteLine(selectedTimeFrame.ToString());
        return await ForecastService.GetForecastAsync(DateTime.Now.AddDays((selectedTimeFrame) * -1));
    }
}
